<?xml version="1.0" encoding="ISO-8859-1"?>
<!--(c) Copyright 2008, VersionOne, Inc. All rights reserved. (c)-->
<project name="V1CC">

    <!-- Compiler settings -->
    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.max.memory" value="128m"/>
    <property name="compiler.args" value=""/>

    <!--Settings-->
    <property name="ver.major" value="9"/>
    <property name="ver.minor" value="0"/>
    <property name="ver.build" value="0"/>
    <property name="publish.dir" value="./_publish"/>
    <property name="build.version" value="${ver.major}.${ver.minor}.${ver.build}"/>
    <property name="jar.filename" value="V1Publisher.jar"/>
    <property name="zip.filename" value="CruiseControlPublisher.${build.version}.zip"/>
    <property name="source.zip.filename" value="CruiseControlPublisher.Source.${build.version}.zip"/>
    <property name="coverage.file" value="cobertura.ser"/>

    <!-- Directories -->
    <property name="base.dir" value="."/>
    <property name="build.dir" value="${basedir}/Common"/>
    <property name="bin.product.dir" value="${build.dir}/bin_production"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="distr.dir" value="${basedir}/distr"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="coverage.dir" value="coverage"/>
    <property name="coverage.classes" value="${coverage.dir}/classes"/>
    <property name="coverage.junit" value="${coverage.dir}/junit"/>
	<property name="doc.dir" value="${basedir}/doc"/>

    <path id="classpath">
        <pathelement location="${lib.dir}/VersionOne.APIClient.jar"/>
        <pathelement location="${lib.dir}/cruisecontrol.jar"/>
        <pathelement location="${lib.dir}/jdom.jar"/>
        <pathelement location="${lib.dir}/log4j.jar"/>
        <pathelement location="${lib.dir}/jaxen-1.1-beta-8.jar"/>
        <pathelement location="${lib.dir}/VersionOne.ObjectModel.jar"/>
	<pathelement location="${lib.dir}/junit-4.4.jar"/>
	<pathelement location="${lib.dir}/cobertura.jar"/>
    </path>


    <taskdef classpath="${lib.dir}/cobertura.jar" resource="tasks.properties">
        <classpath>
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </classpath>
    </taskdef>


    <target name="compile.clean">
        <delete dir="${bin.product.dir}"/>
    </target>

    <target name="compile" depends="compile.clean"
            description="Compile V1CruiseControl Publisher; production classes">
        <mkdir dir="${bin.product.dir}"/>

        <javac destdir="${bin.product.dir}" debug="${compiler.debug}"
               nowarn="${compiler.generate.no.warnings}"
               memorymaximumsize="${compiler.max.memory}"
               fork="true">
            <src path="${base.dir}/src"/>
            <src path="${base.dir}/tests"/>
            <compilerarg line="${compiler.args}"/>
            <classpath refid="classpath"/>
        </javac>
    </target>

    <target name="package.clean">
        <delete file="${build.dir}/${jar.filename}"/>
    </target>

    <target name="package" depends="package.clean, compile"
            description="creating jar package">
        <jar jarfile="${build.dir}/${jar.filename}">

	    <fileset dir="${bin.product.dir}"
                excludes="**/PublisherTester.class, **/DOMtoJDOM.class"/>
            <manifest>
                <attribute name="BuiltBy" value="VersionOne"/>
                <attribute name="Main-Class"
                           value="com.versionone.cruisecontrol.publisher.VersionOnePublisher"/>
                <attribute name="BuildVersion" value="${build.version}"/>
                <attribute name="BuildRev" value="${ver.build}"/>
            </manifest>
        </jar>
    </target>
	
    <target name="plugin.test" depends="compile">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <classpath>
	       <pathelement location="${bin.product.dir}"/>
	       <path refid="classpath"/>
            </classpath>
            <formatter type="xml"/>


            <batchtest fork="yes" todir="${junit.output.dir}">
                <fileset dir="${bin.product.dir}">
	            <include name="**/PublisherTester.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="zip.clean">
        <delete dir="${distr.dir}"/>
        <delete file="${zip.filename}"/>
        <delete file="${source.zip.filename}"/>
	<!--<delete dir="${publish.dir}"/>-->
	<delete dir="${junit.output.dir}"/>
	<delete dir="." includes="cobertura.ser"/>
    </target>

    <target name="zip.plugin" depends="zip.clean, package">
        <mkdir dir="${distr.dir}"/>
		<mkdir dir="${publish.dir}"/>
		<mkdir dir="${distr.dir}/doc"/>

        <copy file="${build.dir}/${jar.filename}" todir="${distr.dir}"/>
        <copy file="${lib.dir}/VersionOne.APIClient.jar" todir="${distr.dir}"/>
        <copy file="${lib.dir}/VersionOne.ObjectModel.jar"
              todir="${distr.dir}"/>

		<copy todir="${distr.dir}/doc" flatten="false">
			<fileset dir="${doc.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		
        <zip destfile="${publish.dir}/${zip.filename}" basedir="${distr.dir}"/>
		
		<zip destfile="${publish.dir}/${source.zip.filename}">
			<fileset dir="${base.dir}">
				<include name="build.xml"/>
				<include name="testdata.xml"/>
				<include name="stripDTD.xsl"/>
				<include name="src/**/*"/>
				<include name="tests/**/*"/>
				<include name="lib/**/*"/>
				<include name="DocSource/**/*"/>
			</fileset>
		</zip>		
		
    </target>

    <target name="coverage.init">
        <mkdir dir="${coverage.classes}"/>
        <mkdir dir="${coverage.junit}"/>
    </target>

    <target name="coverage.clean">
        <delete dir="${coverage.dir}"/>
        <delete file="${coverage.file}"/>
    </target>

    <target name="coverage" depends="compile, coverage.clean, coverage.init">
	<mkdir dir="${junit.output.dir}"/>
        <cobertura-instrument todir="${coverage.classes}" datafile="${coverage.file}">
            	    <fileset dir="${bin.product.dir}">
			<include name="**/*.class"/>
                	<exclude name="**/PublisherTester.class"/>
			<exclude name="**/DOMtoJDOM.class"/>
		    </fileset>
        </cobertura-instrument>

        <junit fork="yes" printsummary="withOutAndErr">
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${coverage.file}"/>
            <!--<sysproperty key="test.websiteurl" value="${test.websiteurl}"/>-->

            <classpath>
	       <pathelement location="${coverage.classes}"/>
	       <pathelement location="${bin.product.dir}"/>
	       <path refid="classpath"/>
            </classpath>
            <formatter type="xml"/>


            <batchtest fork="yes" todir="${junit.output.dir}">
                <fileset dir="${bin.product.dir}">
	            <include name="**/PublisherTester.class"/>
                </fileset>
            </batchtest>
        </junit>

        <cobertura-report datafile="${coverage.file}" destdir="${coverage.dir}/html">
            <fileset dir="${src.dir}" includes="**/*"/>
        </cobertura-report>
        <cobertura-report datafile="${coverage.file}" format="xml" destdir="${coverage.dir}">
            <fileset dir="${src.dir}" includes="**/*"/>
        </cobertura-report>
        <move file="${coverage.dir}/coverage.xml" tofile="${coverage.dir}/coverage.raw"/>
        <xslt destdir="${coverage.dir}" style="${base.dir}/stripDTD.xsl" in="${coverage.dir}/coverage.raw"
            out="${coverage.dir}/coverage.xml"/>
        <xslt destdir="${coverage.dir}" style="${base.dir}/cobertura.xsl" in="${coverage.dir}/coverage.raw"
          out="${coverage.dir}/coverage-summary.html"/>
    </target>

	<target name="gendoc.clean">
		<delete dir="${doc.dir}"/>
	</target>
	
	<!-- ===================================================================== -->
	<!-- Create Documentation-->
	<!-- ===================================================================== -->		
	<macrodef name="gendoc.content.base">
		<attribute name="filename"/>
		<attribute name="collect.xref.targets"/>
		<attribute name="content.doc.output.dir" default="${doc.dir}/@{filename}"/>
		<sequential>
			<mkdir dir="@{content.doc.output.dir}"/>
			<echo>${doc.source.dir} [/] ${common.dir}/docbook/xsltproc/xsltproc.exe -o ../@{content.doc.output.dir}/@{filename}.html --stringparam current.docid ${filename} --stringparam target.database.document olinkdb.xml --stringparam collect.xref.targets ${collect.xref.targets} --stringparam targets.filename @{filename}.db Common/v1integration.xsl @{filename}/@{filename}.xml</echo>
			<exec dir="${doc.source.dir}" executable="${common.dir}/docbook/xsltproc/xsltproc.exe"
				failonerror="true">
				<arg
					line="-o @{content.doc.output.dir}/@{filename}.html --stringparam current.docid ${filename} --stringparam target.database.document olinkdb.xml --stringparam collect.xref.targets ${collect.xref.targets} --stringparam targets.filename @{filename}.db Common/v1integration.xsl @{filename}/@{filename}.xml"
				/>
			</exec>
		</sequential>
	</macrodef>

	<target name="gendoc">
		<property name="doc.source.dir" value="${base.dir}/DocSource"/>
		<property name="common.dir" value="${doc.source.dir}/Common"/>
		
		<delete dir="${doc.dir}/Common"/>
		<mkdir dir="${doc.dir}/Common"/>
		<copy file="${doc.source.dir}/Common/v1integration.css" todir="${doc.dir}/Common"/>
		
		<!-- this is the index file -->
		<echo>${doc.source.dir} [/] ${common.dir}/docbook/xsltproc/xsltproc.exe -o ../${doc.dir}/index.html Common/index.xsl versionOnePublisher.index.xml</echo>
		<exec dir="${doc.source.dir}" executable="${common.dir}/docbook/xsltproc/xsltproc.exe"
			failonerror="true">
			<arg line="-o ${doc.dir}/index.html Common/index.xsl versionOnePublisher.index.xml"/>
		</exec>
		
		<copy todir="${doc.dir}/V1Publisher" flatten="false">
			<fileset dir="${doc.source.dir}/V1Publisher">
				<include name="*.jpg" />
			</fileset>
		</copy>
		<gendoc.content.base filename="V1Publisher" collect.xref.targets="only"/>
		<gendoc.content.base filename="V1Publisher" collect.xref.targets="no"/>
		
	</target>	

    <target name="clean" depends="compile.clean,gendoc.clean,package.clean,zip.clean"/>

    <target name="ccnet.build" depends="clean, compile, coverage, plugin.test, gendoc, zip.plugin"/>
</project>